static GAME_OVER: bool;
static RNG: u64;
static SCORE_BUF: [u8; 10];
static PLAYERS: [Player; 4];
static CURRENT_PLAYER: usize;
static CURRENT_GAME_PHASE: GamePhase;
static BIDS: [Bid; 25];
static BIDS_SIZE: usize; // less than 0

enum Suit {
  Clubs,
  Diamonds,
  Hearts,
  Spades,
}

enum BidSuit {
  Clubs,
  Diamonds,
  Hearts,
  Spades,
  NoTrump
}

enum Value {
  Ace,
  Two,
  Three,
  Four,
  Five,
  Six,
  Seven,
  Eight,
  Nine,
  Ten,
  Jack,
  King,
  Queen,
}

struct Card {
  suit: Suit,
  value: Value,
}

struct PlayerHand {
  hand: [Card; 13],
  hand_size: usize,
}

enum Seat {
  North,
  East,
  South,
  West,
}

struct Player {
  id: u32,
  hand: PlayerHand,
  seat: Seat,
}

enum GamePhase {
  Bidding,
  Playing,
  GameOver,
}

struct Bid {
  u32: Value, // 1 - 7
  suit: BidSuit,
}

proc rand() -> u64 {
   RNG = RNG ^ (RNG << 13);
   RNG = RNG ^ (RNG >> 7);
   RNG = RNG ^ (RNG << 17);
   return RNG;
}

proc rand_range(rand_min: u64, rand_max: u64) -> u64 {
   return rand() % (rand_max + 1 - rand_min) + rand_min;
}

proc one_in(x: u64) -> bool {
   return rand_range(0, x - 1) == 0;
}

proc reset_game() {
   GAME_OVER = false;
   RNG = 2;
   CURRENT_PLAYER = 0;
   CURRENT_GAME_PHASE = GamePhase::Bidding;
   // Deal out cards. For now, deal everyone the ace of spades.
   deal_cards();
}

proc deal_cards() {
 for i in 0..PLAYERS.length {
     PLAYERS[i] = Player {
       id: i transmute u32,
       hand: PlayerHand {
         hand: [Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         },Card {
           suit: Suit::Spades,
           value: Value::Ace,
         }],
       hand_size: 1,
       },
       seat: Seat::North,
     };
   }
}

proc start() {
   PALETTE~ = [16774867, 16361589, 15428463, 8142680];
   SYSTEM_FLAGS~ = SYSTEM_HIDE_GAMEPAD_OVERLAY;
   reset_game();
}

proc update() {
   if CURRENT_GAME_PHASE == GamePhase::GameOver {
     trace("game is over");
   }
   else if CURRENT_GAME_PHASE == GamePhase::Bidding {
     trace("bidding");
     // for the player whose turn it is, if they made an input on the last frame
     // update the bid
     //
     // draw bid UI
   }
   else if CURRENT_GAME_PHASE == GamePhase::Playing {
     trace("playing");
   }


  

   // Handle input
   let button_pressed = (GAMEPADS~[0] & BUTTON_1) > 0;
   let mouse_pressed = (MOUSE_BUTTONS~ & MOUSE_LEFT) > 0;
   // Draw world
   {

   }
}
